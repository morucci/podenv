{- This file is a local podenv configuration to test podenv -}
let Podenv = env:PODENV_PRELUDE

let Hub = env:PODENV_HUB

let packages =
      [ "python3-mypy"
      , "python3-flake8"
      , "python3-pyyaml"
      , "make"
      , "bzip2"
      , "findutils"
      ]

in  Podenv.Env::{
    , name = "podenv-unittests"
    , description = Some "Run podenv unittests"
    , mounts = Some
      [ Hub.Functions.mkMountMap "~/.cache/dhall"
      , Hub.Functions.mkMountMap "~/.cache/dhall-haskell"
      , Hub.Functions.mkMount "~/git/github.com/podenv/hub" "../hub"
      ]
    , capabilities = Podenv.Capabilities::{
      , mount-cwd = Some True
      , uidmap = Some True
      }
    , user = Some { name = "user", uid = 1000, home = "/home/user" }
    , environ = Some (toMap { HOME = "/home/user" })
    , container-file =
        let concat = Hub.Prelude.Text.concatSep

        in  Hub.Functions.containerFromText
              (     ''
                    FROM registry.fedoraproject.org/fedora:latest
                    RUN dnf install -y ${concat " " packages}
                    RUN useradd -u 1000 -m user
                    ''
                ++  Hub.Environments.Dhall.Commands.`1.33`.base
                ++  "\n"
                ++  Hub.Environments.Dhall.Commands.`1.33`.json
              )
    , container-update = Hub.Functions.containerFromText "RUN dnf update -y"
    , build-env = Some Podenv.BuildEnv::{
      , mounts =
        [ Hub.Functions.mkMount "/var/cache/dnf" "~/.cache/podenv/dnf" ]
      }
    , command = Some [ "make" ]
    }
